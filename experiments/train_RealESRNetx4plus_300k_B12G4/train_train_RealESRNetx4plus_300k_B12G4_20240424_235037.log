2024-04-24 23:50:37,386 INFO: 
                ____                _       _____  ____
               / __ ) ____ _ _____ (_)_____/ ___/ / __ \
              / __  |/ __ `// ___// // ___/\__ \ / /_/ /
             / /_/ // /_/ /(__  )/ // /__ ___/ // _, _/
            /_____/ \__,_//____//_/ \___//____//_/ |_|
     ______                   __   __                 __      __
    / ____/____   ____   ____/ /  / /   __  __ _____ / /__   / /
   / / __ / __ \ / __ \ / __  /  / /   / / / // ___// //_/  / /
  / /_/ // /_/ // /_/ // /_/ /  / /___/ /_/ // /__ / /<    /_/
  \____/ \____/ \____/ \____/  /_____/\____/ \___//_/|_|  (_)
    
Version Information: 
	BasicSR: 1.4.2
	PyTorch: 2.0.1+cu118
	TorchVision: 0.15.2+cu118
2024-04-24 23:50:37,386 INFO: 
  name: train_RealESRNetx4plus_300k_B12G4
  model_type: RealESRNetModel
  scale: 4
  num_gpu: 1
  manual_seed: 0
  gt_usm: True
  resize_prob: [0.2, 0.7, 0.1]
  resize_range: [0.2, 1.5]
  gaussian_noise_prob: 0.5
  noise_range: [1, 20]
  poisson_scale_range: [0.05, 2]
  gray_noise_prob: 0.4
  jpeg_range: [50, 95]
  second_blur_prob: 0.8
  resize_prob2: [0.3, 0.4, 0.3]
  resize_range2: [0.3, 1.2]
  gaussian_noise_prob2: 0.5
  noise_range2: [1, 15]
  poisson_scale_range2: [0.05, 1.5]
  gray_noise_prob2: 0.4
  jpeg_range2: [70, 95]
  gt_size: 512
  queue_size: 176
  datasets:[
    train:[
      name: FFHQ_train
      type: FFHQsubDataset
      dataroot_gt: data/FFHQ/train/GT
      meta_info: data/FFHQ/train/meta_info_FFHQ5000sub_GT.txt
      io_backend:[
        type: disk
      ]
      blur_kernel_size: 21
      kernel_list: ['iso', 'aniso', 'generalized_iso', 'generalized_aniso', 'plateau_iso', 'plateau_aniso']
      kernel_prob: [0.45, 0.25, 0.12, 0.03, 0.12, 0.03]
      sinc_prob: 0.1
      blur_sigma: [0.2, 3]
      betag_range: [0.5, 4]
      betap_range: [1, 2]
      blur_kernel_size2: 21
      kernel_list2: ['iso', 'aniso', 'generalized_iso', 'generalized_aniso', 'plateau_iso', 'plateau_aniso']
      kernel_prob2: [0.45, 0.25, 0.12, 0.03, 0.12, 0.03]
      sinc_prob2: 0.1
      blur_sigma2: [0.2, 1.5]
      betag_range2: [0.5, 4]
      betap_range2: [1, 2]
      final_sinc_prob: 0.8
      gt_size: 512
      use_hflip: True
      use_rot: False
      use_shuffle: True
      num_worker_per_gpu: 6
      batch_size_per_gpu: 8
      dataset_enlarge_ratio: 1
      prefetch_mode: None
      phase: train
      scale: 4
    ]
    val:[
      name: FFHQ_val
      type: PairedImageDataset
      dataroot_gt: data/FFHQ/val/GT
      dataroot_lq: data/FFHQ/val/LQ
      io_backend:[
        type: disk
      ]
      phase: val
      scale: 4
    ]
  ]
  network_g:[
    type: RRDBNet
    num_in_ch: 3
    num_out_ch: 3
    num_feat: 32
    num_block: 11
    num_grow_ch: 16
  ]
  path:[
    pretrain_network_g: D:\Code\Real-ESRGAN\experiments\train_RealESRNetx4plus_300k_B12G4\models\net_g_1000000.pth
    param_key_g: params
    strict_load_g: True
    resume_state: experiments\train_RealESRNetx4plus_300k_B12G4\training_states\1000000.state
    experiments_root: D:\Code\Real-ESRGAN\experiments\train_RealESRNetx4plus_300k_B12G4
    models: D:\Code\Real-ESRGAN\experiments\train_RealESRNetx4plus_300k_B12G4\models
    training_states: D:\Code\Real-ESRGAN\experiments\train_RealESRNetx4plus_300k_B12G4\training_states
    log: D:\Code\Real-ESRGAN\experiments\train_RealESRNetx4plus_300k_B12G4
    visualization: D:\Code\Real-ESRGAN\experiments\train_RealESRNetx4plus_300k_B12G4\visualization
  ]
  train:[
    ema_decay: 0.999
    optim_g:[
      type: Adam
      lr: 0.0002
      weight_decay: 0
      betas: [0.9, 0.99]
    ]
    scheduler:[
      type: MultiStepLR
      milestones: [1000000]
      gamma: 0.5
    ]
    total_iter: 1050000
    warmup_iter: -1
    pixel_opt:[
      type: L1Loss
      loss_weight: 1.0
      reduction: mean
    ]
  ]
  val:[
    val_freq: 5000.0
    save_img: True
    metrics:[
      psnr:[
        type: calculate_psnr
        crop_border: 0
        test_y_channel: False
        better: higher
      ]
      niqe:[
        type: calculate_ssim
        crop_border: 0
        better: higher
      ]
    ]
  ]
  logger:[
    print_freq: 100
    save_checkpoint_freq: 5000.0
    use_tb_logger: True
    wandb:[
      project: None
      resume_id: None
    ]
  ]
  dist_params:[
    backend: nccl
    port: 29500
  ]
  dist: False
  rank: 0
  world_size: 1
  auto_resume: True
  is_train: True
  root_path: D:\Code\Real-ESRGAN

2024-04-24 23:50:37,552 INFO: Dataset [FFHQsubDataset] - FFHQ_train is built.
2024-04-24 23:50:37,552 INFO: Training statistics:
	Number of train images: 5000
	Dataset enlarge ratio: 1
	Batch size per gpu: 8
	World size (gpu number): 1
	Require iter number per epoch: 625
	Total epochs: 1680; iters: 1050000.
2024-04-24 23:50:37,573 INFO: Dataset [PairedImageDataset] - FFHQ_val is built.
2024-04-24 23:50:37,573 INFO: Number of val images/folders in FFHQ_val: 400
2024-04-24 23:50:37,604 INFO: Network [RRDBNet] is created.
2024-04-24 23:50:37,630 INFO: Network: RRDBNet, with parameters: 2,018,755
2024-04-24 23:50:37,630 INFO: RRDBNet(
  (conv_first): Conv2d(3, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (body): Sequential(
    (0): RRDB(
      (rdb1): ResidualDenseBlock(
        (conv1): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb2): ResidualDenseBlock(
        (conv1): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb3): ResidualDenseBlock(
        (conv1): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (1): RRDB(
      (rdb1): ResidualDenseBlock(
        (conv1): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb2): ResidualDenseBlock(
        (conv1): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb3): ResidualDenseBlock(
        (conv1): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (2): RRDB(
      (rdb1): ResidualDenseBlock(
        (conv1): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb2): ResidualDenseBlock(
        (conv1): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb3): ResidualDenseBlock(
        (conv1): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (3): RRDB(
      (rdb1): ResidualDenseBlock(
        (conv1): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb2): ResidualDenseBlock(
        (conv1): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb3): ResidualDenseBlock(
        (conv1): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (4): RRDB(
      (rdb1): ResidualDenseBlock(
        (conv1): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb2): ResidualDenseBlock(
        (conv1): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb3): ResidualDenseBlock(
        (conv1): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (5): RRDB(
      (rdb1): ResidualDenseBlock(
        (conv1): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb2): ResidualDenseBlock(
        (conv1): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb3): ResidualDenseBlock(
        (conv1): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (6): RRDB(
      (rdb1): ResidualDenseBlock(
        (conv1): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb2): ResidualDenseBlock(
        (conv1): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb3): ResidualDenseBlock(
        (conv1): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (7): RRDB(
      (rdb1): ResidualDenseBlock(
        (conv1): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb2): ResidualDenseBlock(
        (conv1): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb3): ResidualDenseBlock(
        (conv1): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (8): RRDB(
      (rdb1): ResidualDenseBlock(
        (conv1): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb2): ResidualDenseBlock(
        (conv1): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb3): ResidualDenseBlock(
        (conv1): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (9): RRDB(
      (rdb1): ResidualDenseBlock(
        (conv1): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb2): ResidualDenseBlock(
        (conv1): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb3): ResidualDenseBlock(
        (conv1): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (10): RRDB(
      (rdb1): ResidualDenseBlock(
        (conv1): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb2): ResidualDenseBlock(
        (conv1): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb3): ResidualDenseBlock(
        (conv1): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
  )
  (conv_body): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (conv_up1): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (conv_up2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (conv_hr): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (conv_last): Conv2d(32, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
)
2024-04-24 23:50:37,652 INFO: Loading RRDBNet model from D:\Code\Real-ESRGAN\experiments\train_RealESRNetx4plus_300k_B12G4\models\net_g_1000000.pth, with param key: [params].
2024-04-24 23:50:37,684 INFO: Use Exponential Moving Average with decay: 0.999
2024-04-24 23:50:37,726 INFO: Network [RRDBNet] is created.
2024-04-24 23:50:37,763 INFO: Loading RRDBNet model from D:\Code\Real-ESRGAN\experiments\train_RealESRNetx4plus_300k_B12G4\models\net_g_1000000.pth, with param key: [params_ema].
2024-04-24 23:50:37,781 INFO: Loss [L1Loss] is created.
2024-04-24 23:50:37,809 INFO: Model [RealESRNetModel] is created.
2024-04-24 23:50:38,836 INFO: Resuming training from epoch: 1593, iter: 1000000.
2024-04-24 23:50:51,811 INFO: Start training from epoch: 1593, iter: 1000000
2024-04-24 23:51:46,621 INFO: [train..][epoch:1593, iter:1,000,100, lr:(1.000e-04,)] [eta: 9:18:09, time (data): 0.548 (0.144)] l_pix: 3.6144e-02 
2024-04-24 23:52:20,535 INFO: [train..][epoch:1593, iter:1,000,200, lr:(1.000e-04,)] [eta: 6:59:56, time (data): 0.444 (0.074)] l_pix: 3.5811e-02 
2024-04-24 23:52:54,505 INFO: [train..][epoch:1593, iter:1,000,300, lr:(1.000e-04,)] [eta: 6:13:20, time (data): 0.339 (0.004)] l_pix: 3.3173e-02 
2024-04-24 23:53:28,370 INFO: [train..][epoch:1593, iter:1,000,400, lr:(1.000e-04,)] [eta: 5:49:29, time (data): 0.339 (0.004)] l_pix: 3.4768e-02 
2024-04-24 23:54:02,238 INFO: [train..][epoch:1593, iter:1,000,500, lr:(1.000e-04,)] [eta: 5:34:56, time (data): 0.339 (0.004)] l_pix: 3.0081e-02 
2024-04-24 23:54:36,206 INFO: [train..][epoch:1593, iter:1,000,600, lr:(1.000e-04,)] [eta: 5:25:10, time (data): 0.339 (0.004)] l_pix: 3.9201e-02 
2024-04-24 23:55:24,461 INFO: [train..][epoch:1594, iter:1,000,700, lr:(1.000e-04,)] [eta: 5:34:47, time (data): 0.487 (0.148)] l_pix: 3.0104e-02 
2024-04-24 23:55:58,360 INFO: [train..][epoch:1594, iter:1,000,800, lr:(1.000e-04,)] [eta: 5:27:05, time (data): 0.412 (0.075)] l_pix: 3.2162e-02 
2024-04-24 23:56:32,360 INFO: [train..][epoch:1594, iter:1,000,900, lr:(1.000e-04,)] [eta: 5:21:04, time (data): 0.340 (0.004)] l_pix: 3.2506e-02 
2024-04-24 23:57:06,551 INFO: [train..][epoch:1594, iter:1,001,000, lr:(1.000e-04,)] [eta: 5:16:18, time (data): 0.341 (0.003)] l_pix: 3.5084e-02 
2024-04-24 23:57:40,514 INFO: [train..][epoch:1594, iter:1,001,100, lr:(1.000e-04,)] [eta: 5:12:08, time (data): 0.339 (0.004)] l_pix: 3.0442e-02 
2024-04-24 23:58:14,482 INFO: [train..][epoch:1594, iter:1,001,200, lr:(1.000e-04,)] [eta: 5:08:33, time (data): 0.340 (0.004)] l_pix: 3.7931e-02 
2024-04-24 23:59:01,950 INFO: [train..][epoch:1595, iter:1,001,300, lr:(1.000e-04,)] [eta: 5:13:52, time (data): 0.483 (0.145)] l_pix: 3.4397e-02 
2024-04-24 23:59:35,840 INFO: [train..][epoch:1595, iter:1,001,400, lr:(1.000e-04,)] [eta: 5:10:28, time (data): 0.409 (0.072)] l_pix: 3.5451e-02 
2024-04-25 00:00:09,771 INFO: [train..][epoch:1595, iter:1,001,500, lr:(1.000e-04,)] [eta: 5:07:27, time (data): 0.339 (0.003)] l_pix: 3.1288e-02 
2024-04-25 00:00:43,714 INFO: [train..][epoch:1595, iter:1,001,600, lr:(1.000e-04,)] [eta: 5:04:45, time (data): 0.339 (0.003)] l_pix: 3.7750e-02 
2024-04-25 00:01:17,800 INFO: [train..][epoch:1595, iter:1,001,700, lr:(1.000e-04,)] [eta: 5:02:23, time (data): 0.340 (0.004)] l_pix: 3.0960e-02 
2024-04-25 00:01:51,821 INFO: [train..][epoch:1595, iter:1,001,800, lr:(1.000e-04,)] [eta: 5:00:10, time (data): 0.340 (0.004)] l_pix: 3.8052e-02 
2024-04-25 00:02:39,633 INFO: [train..][epoch:1596, iter:1,001,900, lr:(1.000e-04,)] [eta: 5:03:57, time (data): 0.491 (0.152)] l_pix: 3.1456e-02 
2024-04-25 00:03:13,625 INFO: [train..][epoch:1596, iter:1,002,000, lr:(1.000e-04,)] [eta: 5:01:45, time (data): 0.412 (0.074)] l_pix: 2.8250e-02 
2024-04-25 00:03:47,631 INFO: [train..][epoch:1596, iter:1,002,100, lr:(1.000e-04,)] [eta: 4:59:43, time (data): 0.340 (0.003)] l_pix: 3.6031e-02 
2024-04-25 00:04:21,634 INFO: [train..][epoch:1596, iter:1,002,200, lr:(1.000e-04,)] [eta: 4:57:48, time (data): 0.340 (0.003)] l_pix: 3.1087e-02 
2024-04-25 00:04:55,606 INFO: [train..][epoch:1596, iter:1,002,300, lr:(1.000e-04,)] [eta: 4:56:00, time (data): 0.340 (0.004)] l_pix: 3.3608e-02 
2024-04-25 00:05:29,771 INFO: [train..][epoch:1596, iter:1,002,400, lr:(1.000e-04,)] [eta: 4:54:22, time (data): 0.341 (0.004)] l_pix: 3.3483e-02 
2024-04-25 00:06:03,572 INFO: [train..][epoch:1596, iter:1,002,500, lr:(1.000e-04,)] [eta: 4:52:42, time (data): 0.337 (0.003)] l_pix: 3.2396e-02 
2024-04-25 00:06:50,915 INFO: [train..][epoch:1597, iter:1,002,600, lr:(1.000e-04,)] [eta: 4:55:14, time (data): 0.410 (0.076)] l_pix: 3.6624e-02 
2024-04-25 00:07:24,841 INFO: [train..][epoch:1597, iter:1,002,700, lr:(1.000e-04,)] [eta: 4:53:36, time (data): 0.340 (0.003)] l_pix: 3.2736e-02 
2024-04-25 00:07:59,033 INFO: [train..][epoch:1597, iter:1,002,800, lr:(1.000e-04,)] [eta: 4:52:08, time (data): 0.341 (0.003)] l_pix: 4.0739e-02 
2024-04-25 00:08:32,961 INFO: [train..][epoch:1597, iter:1,002,900, lr:(1.000e-04,)] [eta: 4:50:38, time (data): 0.339 (0.004)] l_pix: 2.8610e-02 
2024-04-25 00:09:06,953 INFO: [train..][epoch:1597, iter:1,003,000, lr:(1.000e-04,)] [eta: 4:49:14, time (data): 0.339 (0.003)] l_pix: 2.9867e-02 
2024-04-25 00:09:41,014 INFO: [train..][epoch:1597, iter:1,003,100, lr:(1.000e-04,)] [eta: 4:47:54, time (data): 0.340 (0.003)] l_pix: 2.9660e-02 
2024-04-25 00:10:28,634 INFO: [train..][epoch:1598, iter:1,003,200, lr:(1.000e-04,)] [eta: 4:49:54, time (data): 0.414 (0.075)] l_pix: 3.7084e-02 
2024-04-25 00:11:02,684 INFO: [train..][epoch:1598, iter:1,003,300, lr:(1.000e-04,)] [eta: 4:48:33, time (data): 0.340 (0.003)] l_pix: 3.1389e-02 
2024-04-25 00:11:36,961 INFO: [train..][epoch:1598, iter:1,003,400, lr:(1.000e-04,)] [eta: 4:47:18, time (data): 0.341 (0.004)] l_pix: 2.9667e-02 
2024-04-25 00:12:11,091 INFO: [train..][epoch:1598, iter:1,003,500, lr:(1.000e-04,)] [eta: 4:46:03, time (data): 0.341 (0.004)] l_pix: 3.5296e-02 
2024-04-25 00:12:45,231 INFO: [train..][epoch:1598, iter:1,003,600, lr:(1.000e-04,)] [eta: 4:44:50, time (data): 0.341 (0.004)] l_pix: 3.0041e-02 
2024-04-25 00:13:19,244 INFO: [train..][epoch:1598, iter:1,003,700, lr:(1.000e-04,)] [eta: 4:43:38, time (data): 0.340 (0.004)] l_pix: 3.1544e-02 
2024-04-25 00:14:06,982 INFO: [train..][epoch:1599, iter:1,003,800, lr:(1.000e-04,)] [eta: 4:45:15, time (data): 0.416 (0.078)] l_pix: 3.5820e-02 
2024-04-25 00:14:41,021 INFO: [train..][epoch:1599, iter:1,003,900, lr:(1.000e-04,)] [eta: 4:44:02, time (data): 0.340 (0.003)] l_pix: 3.4317e-02 
2024-04-25 00:15:15,210 INFO: [train..][epoch:1599, iter:1,004,000, lr:(1.000e-04,)] [eta: 4:42:53, time (data): 0.341 (0.004)] l_pix: 3.7202e-02 
2024-04-25 00:15:49,459 INFO: [train..][epoch:1599, iter:1,004,100, lr:(1.000e-04,)] [eta: 4:41:47, time (data): 0.342 (0.004)] l_pix: 2.8798e-02 
2024-04-25 00:16:23,447 INFO: [train..][epoch:1599, iter:1,004,200, lr:(1.000e-04,)] [eta: 4:40:39, time (data): 0.341 (0.005)] l_pix: 2.6693e-02 
2024-04-25 00:16:57,397 INFO: [train..][epoch:1599, iter:1,004,300, lr:(1.000e-04,)] [eta: 4:39:32, time (data): 0.339 (0.002)] l_pix: 3.3227e-02 
2024-04-25 00:17:45,139 INFO: [train..][epoch:1600, iter:1,004,400, lr:(1.000e-04,)] [eta: 4:40:50, time (data): 0.416 (0.078)] l_pix: 3.5557e-02 
2024-04-25 00:18:19,069 INFO: [train..][epoch:1600, iter:1,004,500, lr:(1.000e-04,)] [eta: 4:39:42, time (data): 0.340 (0.004)] l_pix: 2.8679e-02 
2024-04-25 00:18:53,051 INFO: [train..][epoch:1600, iter:1,004,600, lr:(1.000e-04,)] [eta: 4:38:37, time (data): 0.340 (0.004)] l_pix: 2.8932e-02 
2024-04-25 00:19:27,260 INFO: [train..][epoch:1600, iter:1,004,700, lr:(1.000e-04,)] [eta: 4:37:35, time (data): 0.342 (0.005)] l_pix: 2.9223e-02 
2024-04-25 00:20:01,438 INFO: [train..][epoch:1600, iter:1,004,800, lr:(1.000e-04,)] [eta: 4:36:34, time (data): 0.342 (0.004)] l_pix: 3.4042e-02 
2024-04-25 00:20:35,587 INFO: [train..][epoch:1600, iter:1,004,900, lr:(1.000e-04,)] [eta: 4:35:33, time (data): 0.341 (0.004)] l_pix: 3.0200e-02 
2024-04-25 00:21:09,615 INFO: [train..][epoch:1600, iter:1,005,000, lr:(1.000e-04,)] [eta: 4:34:33, time (data): 0.340 (0.004)] l_pix: 2.9462e-02 
2024-04-25 00:21:09,615 INFO: Saving models and training states.
2024-04-25 00:22:51,895 INFO: Validation FFHQ_val
	 # psnr: 26.4345	Best: 26.4345 @ 1005000 iter
	 # niqe: 0.7595	Best: 0.7595 @ 1005000 iter

2024-04-25 00:23:39,695 INFO: [train..][epoch:1601, iter:1,005,100, lr:(1.000e-04,)] [eta: 4:50:35, time (data): 0.340 (0.004)] l_pix: 2.9593e-02 
2024-04-25 00:24:13,812 INFO: [train..][epoch:1601, iter:1,005,200, lr:(1.000e-04,)] [eta: 4:49:16, time (data): 0.341 (0.004)] l_pix: 3.7585e-02 
2024-04-25 00:24:48,075 INFO: [train..][epoch:1601, iter:1,005,300, lr:(1.000e-04,)] [eta: 4:47:59, time (data): 0.342 (0.003)] l_pix: 2.7091e-02 
2024-04-25 00:25:22,292 INFO: [train..][epoch:1601, iter:1,005,400, lr:(1.000e-04,)] [eta: 4:46:44, time (data): 0.342 (0.003)] l_pix: 3.2591e-02 
2024-04-25 00:25:56,446 INFO: [train..][epoch:1601, iter:1,005,500, lr:(1.000e-04,)] [eta: 4:45:29, time (data): 0.342 (0.003)] l_pix: 3.8059e-02 
2024-04-25 00:26:30,304 INFO: [train..][epoch:1601, iter:1,005,600, lr:(1.000e-04,)] [eta: 4:44:14, time (data): 0.340 (0.004)] l_pix: 3.4428e-02 
2024-04-25 00:27:17,944 INFO: [train..][epoch:1602, iter:1,005,700, lr:(1.000e-04,)] [eta: 4:44:47, time (data): 0.339 (0.004)] l_pix: 3.6407e-02 
2024-04-25 00:27:51,850 INFO: [train..][epoch:1602, iter:1,005,800, lr:(1.000e-04,)] [eta: 4:43:33, time (data): 0.339 (0.004)] l_pix: 4.0017e-02 
2024-04-25 00:28:25,880 INFO: [train..][epoch:1602, iter:1,005,900, lr:(1.000e-04,)] [eta: 4:42:21, time (data): 0.341 (0.004)] l_pix: 3.3082e-02 
2024-04-25 00:28:59,848 INFO: [train..][epoch:1602, iter:1,006,000, lr:(1.000e-04,)] [eta: 4:41:10, time (data): 0.340 (0.004)] l_pix: 3.7129e-02 
2024-04-25 00:29:33,952 INFO: [train..][epoch:1602, iter:1,006,100, lr:(1.000e-04,)] [eta: 4:40:02, time (data): 0.341 (0.003)] l_pix: 3.4154e-02 
2024-04-25 00:30:08,055 INFO: [train..][epoch:1602, iter:1,006,200, lr:(1.000e-04,)] [eta: 4:38:54, time (data): 0.341 (0.004)] l_pix: 3.2238e-02 
2024-04-25 00:30:55,931 INFO: [train..][epoch:1603, iter:1,006,300, lr:(1.000e-04,)] [eta: 4:39:23, time (data): 0.540 (0.197)] l_pix: 3.8061e-02 
