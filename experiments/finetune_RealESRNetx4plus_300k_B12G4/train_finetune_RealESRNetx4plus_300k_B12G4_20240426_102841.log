2024-04-26 10:28:41,323 INFO: 
                ____                _       _____  ____
               / __ ) ____ _ _____ (_)_____/ ___/ / __ \
              / __  |/ __ `// ___// // ___/\__ \ / /_/ /
             / /_/ // /_/ /(__  )/ // /__ ___/ // _, _/
            /_____/ \__,_//____//_/ \___//____//_/ |_|
     ______                   __   __                 __      __
    / ____/____   ____   ____/ /  / /   __  __ _____ / /__   / /
   / / __ / __ \ / __ \ / __  /  / /   / / / // ___// //_/  / /
  / /_/ // /_/ // /_/ // /_/ /  / /___/ /_/ // /__ / /<    /_/
  \____/ \____/ \____/ \____/  /_____/\____/ \___//_/|_|  (_)
    
Version Information: 
	BasicSR: 1.4.2
	PyTorch: 2.0.1+cu118
	TorchVision: 0.15.2+cu118
2024-04-26 10:28:41,323 INFO: 
  name: finetune_RealESRNetx4plus_300k_B12G4
  model_type: RealESRNetModel
  scale: 4
  num_gpu: 1
  manual_seed: 0
  gt_usm: True
  resize_prob: [0.2, 0.7, 0.1]
  resize_range: [0.2, 1.5]
  gaussian_noise_prob: 0.5
  noise_range: [1, 20]
  poisson_scale_range: [0.05, 2]
  gray_noise_prob: 0.4
  jpeg_range: [50, 95]
  second_blur_prob: 0.8
  resize_prob2: [0.3, 0.4, 0.3]
  resize_range2: [0.3, 1.2]
  gaussian_noise_prob2: 0.5
  noise_range2: [1, 15]
  poisson_scale_range2: [0.05, 1.5]
  gray_noise_prob2: 0.4
  jpeg_range2: [70, 95]
  gt_size: 512
  queue_size: 176
  datasets:[
    train:[
      name: FFHQ_train
      type: FFHQsubDataset
      dataroot_gt: data/FFHQ/train/GT
      meta_info: data/FFHQ/train/meta_info_FFHQ5000sub_GT.txt
      io_backend:[
        type: disk
      ]
      blur_kernel_size: 21
      kernel_list: ['iso', 'aniso', 'generalized_iso', 'generalized_aniso', 'plateau_iso', 'plateau_aniso']
      kernel_prob: [0.45, 0.25, 0.12, 0.03, 0.12, 0.03]
      sinc_prob: 0.1
      blur_sigma: [0.2, 3]
      betag_range: [0.5, 4]
      betap_range: [1, 2]
      blur_kernel_size2: 21
      kernel_list2: ['iso', 'aniso', 'generalized_iso', 'generalized_aniso', 'plateau_iso', 'plateau_aniso']
      kernel_prob2: [0.45, 0.25, 0.12, 0.03, 0.12, 0.03]
      sinc_prob2: 0.1
      blur_sigma2: [0.2, 1.5]
      betag_range2: [0.5, 4]
      betap_range2: [1, 2]
      final_sinc_prob: 0.8
      gt_size: 512
      use_hflip: True
      use_rot: False
      use_shuffle: True
      num_worker_per_gpu: 6
      batch_size_per_gpu: 8
      dataset_enlarge_ratio: 1
      prefetch_mode: None
      phase: train
      scale: 4
    ]
    val:[
      name: FFHQ_val
      type: PairedImageDataset
      dataroot_gt: data/FFHQ/val/GT
      dataroot_lq: data/FFHQ/val/LQ
      io_backend:[
        type: disk
      ]
      phase: val
      scale: 4
    ]
  ]
  network_g:[
    type: RRDBNet
    num_in_ch: 3
    num_out_ch: 3
    num_feat: 32
    num_block: 11
    num_grow_ch: 16
  ]
  path:[
    pretrain_network_g: experiments/train_RealESRNetx4plus_300k_B12G4/models/net_g_1085000.pth
    param_key_g: params_ema
    strict_load_g: True
    resume_state: None
    experiments_root: D:\Code\Real-ESRGAN\experiments\finetune_RealESRNetx4plus_300k_B12G4
    models: D:\Code\Real-ESRGAN\experiments\finetune_RealESRNetx4plus_300k_B12G4\models
    training_states: D:\Code\Real-ESRGAN\experiments\finetune_RealESRNetx4plus_300k_B12G4\training_states
    log: D:\Code\Real-ESRGAN\experiments\finetune_RealESRNetx4plus_300k_B12G4
    visualization: D:\Code\Real-ESRGAN\experiments\finetune_RealESRNetx4plus_300k_B12G4\visualization
  ]
  train:[
    ema_decay: 0.999
    optim_g:[
      type: Adam
      lr: 0.0001
      weight_decay: 0
      betas: [0.9, 0.99]
    ]
    scheduler:[
      type: MultiStepLR
      milestones: [400000]
      gamma: 0.5
    ]
    total_iter: 400000
    warmup_iter: -1
    pixel_opt:[
      type: MSELoss
      loss_weight: 1.0
      reduction: mean
    ]
  ]
  val:[
    val_freq: 5000.0
    save_img: True
    metrics:[
      psnr:[
        type: calculate_psnr
        crop_border: 0
        test_y_channel: False
        better: higher
      ]
      niqe:[
        type: calculate_ssim
        crop_border: 4
        better: higher
      ]
    ]
  ]
  logger:[
    print_freq: 100
    save_checkpoint_freq: 5000.0
    use_tb_logger: True
    wandb:[
      project: None
      resume_id: None
    ]
  ]
  dist_params:[
    backend: nccl
    port: 29500
  ]
  dist: False
  rank: 0
  world_size: 1
  auto_resume: True
  is_train: True
  root_path: D:\Code\Real-ESRGAN

2024-04-26 10:28:41,417 INFO: Dataset [FFHQsubDataset] - FFHQ_train is built.
2024-04-26 10:28:41,417 INFO: Training statistics:
	Number of train images: 5000
	Dataset enlarge ratio: 1
	Batch size per gpu: 8
	World size (gpu number): 1
	Require iter number per epoch: 625
	Total epochs: 640; iters: 400000.
2024-04-26 10:28:41,441 INFO: Dataset [PairedImageDataset] - FFHQ_val is built.
2024-04-26 10:28:41,441 INFO: Number of val images/folders in FFHQ_val: 400
2024-04-26 10:28:41,476 INFO: Network [RRDBNet] is created.
2024-04-26 10:28:41,568 INFO: Network: RRDBNet, with parameters: 2,018,755
2024-04-26 10:28:41,568 INFO: RRDBNet(
  (conv_first): Conv2d(3, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (body): Sequential(
    (0): RRDB(
      (rdb1): ResidualDenseBlock(
        (conv1): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb2): ResidualDenseBlock(
        (conv1): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb3): ResidualDenseBlock(
        (conv1): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (1): RRDB(
      (rdb1): ResidualDenseBlock(
        (conv1): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb2): ResidualDenseBlock(
        (conv1): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb3): ResidualDenseBlock(
        (conv1): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (2): RRDB(
      (rdb1): ResidualDenseBlock(
        (conv1): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb2): ResidualDenseBlock(
        (conv1): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb3): ResidualDenseBlock(
        (conv1): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (3): RRDB(
      (rdb1): ResidualDenseBlock(
        (conv1): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb2): ResidualDenseBlock(
        (conv1): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb3): ResidualDenseBlock(
        (conv1): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (4): RRDB(
      (rdb1): ResidualDenseBlock(
        (conv1): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb2): ResidualDenseBlock(
        (conv1): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb3): ResidualDenseBlock(
        (conv1): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (5): RRDB(
      (rdb1): ResidualDenseBlock(
        (conv1): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb2): ResidualDenseBlock(
        (conv1): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb3): ResidualDenseBlock(
        (conv1): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (6): RRDB(
      (rdb1): ResidualDenseBlock(
        (conv1): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb2): ResidualDenseBlock(
        (conv1): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb3): ResidualDenseBlock(
        (conv1): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (7): RRDB(
      (rdb1): ResidualDenseBlock(
        (conv1): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb2): ResidualDenseBlock(
        (conv1): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb3): ResidualDenseBlock(
        (conv1): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (8): RRDB(
      (rdb1): ResidualDenseBlock(
        (conv1): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb2): ResidualDenseBlock(
        (conv1): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb3): ResidualDenseBlock(
        (conv1): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (9): RRDB(
      (rdb1): ResidualDenseBlock(
        (conv1): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb2): ResidualDenseBlock(
        (conv1): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb3): ResidualDenseBlock(
        (conv1): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (10): RRDB(
      (rdb1): ResidualDenseBlock(
        (conv1): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb2): ResidualDenseBlock(
        (conv1): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb3): ResidualDenseBlock(
        (conv1): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
  )
  (conv_body): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (conv_up1): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (conv_up2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (conv_hr): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (conv_last): Conv2d(32, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
)
2024-04-26 10:28:41,596 INFO: Loading RRDBNet model from experiments/train_RealESRNetx4plus_300k_B12G4/models/net_g_1085000.pth, with param key: [params_ema].
2024-04-26 10:28:41,622 INFO: Use Exponential Moving Average with decay: 0.999
2024-04-26 10:28:41,656 INFO: Network [RRDBNet] is created.
2024-04-26 10:28:41,701 INFO: Loading RRDBNet model from experiments/train_RealESRNetx4plus_300k_B12G4/models/net_g_1085000.pth, with param key: [params_ema].
2024-04-26 10:28:41,727 INFO: Loss [MSELoss] is created.
2024-04-26 10:28:41,743 INFO: Model [RealESRNetModel] is created.
2024-04-26 10:28:54,688 INFO: Start training from epoch: 0, iter: 0
2024-04-26 10:29:48,470 INFO: [finet..][epoch:  0, iter:     100, lr:(1.000e-04,)] [eta: 1 day, 11:12:59, time (data): 0.538 (0.141)] l_pix: 3.4694e-03 
2024-04-26 10:30:20,791 INFO: [finet..][epoch:  0, iter:     200, lr:(1.000e-04,)] [eta: 1 day, 11:32:55, time (data): 0.430 (0.073)] l_pix: 3.4185e-03 
2024-04-26 10:30:53,206 INFO: [finet..][epoch:  0, iter:     300, lr:(1.000e-04,)] [eta: 1 day, 11:41:22, time (data): 0.324 (0.003)] l_pix: 3.0134e-03 
2024-04-26 10:31:25,535 INFO: [finet..][epoch:  0, iter:     400, lr:(1.000e-04,)] [eta: 1 day, 11:43:53, time (data): 0.324 (0.003)] l_pix: 4.7965e-03 
2024-04-26 10:31:57,942 INFO: [finet..][epoch:  0, iter:     500, lr:(1.000e-04,)] [eta: 1 day, 11:46:13, time (data): 0.324 (0.004)] l_pix: 2.9736e-03 
2024-04-26 10:32:30,329 INFO: [finet..][epoch:  0, iter:     600, lr:(1.000e-04,)] [eta: 1 day, 11:47:23, time (data): 0.324 (0.004)] l_pix: 3.6644e-03 
2024-04-26 10:33:16,562 INFO: [finet..][epoch:  1, iter:     700, lr:(1.000e-04,)] [eta: 1 day, 13:59:30, time (data): 0.466 (0.143)] l_pix: 3.0770e-03 
2024-04-26 10:33:48,948 INFO: [finet..][epoch:  1, iter:     800, lr:(1.000e-04,)] [eta: 1 day, 13:43:26, time (data): 0.394 (0.072)] l_pix: 2.5492e-03 
2024-04-26 10:34:21,284 INFO: [finet..][epoch:  1, iter:     900, lr:(1.000e-04,)] [eta: 1 day, 13:30:26, time (data): 0.323 (0.005)] l_pix: 3.4909e-03 
2024-04-26 10:34:53,951 INFO: [finet..][epoch:  1, iter:   1,000, lr:(1.000e-04,)] [eta: 1 day, 13:22:07, time (data): 0.325 (0.004)] l_pix: 4.0495e-03 
2024-04-26 10:35:26,733 INFO: [finet..][epoch:  1, iter:   1,100, lr:(1.000e-04,)] [eta: 1 day, 13:15:55, time (data): 0.328 (0.003)] l_pix: 2.6199e-03 
2024-04-26 10:35:59,290 INFO: [finet..][epoch:  1, iter:   1,200, lr:(1.000e-04,)] [eta: 1 day, 13:09:25, time (data): 0.327 (0.003)] l_pix: 2.8116e-03 
2024-04-26 10:36:45,478 INFO: [finet..][epoch:  2, iter:   1,300, lr:(1.000e-04,)] [eta: 1 day, 14:13:27, time (data): 0.471 (0.147)] l_pix: 3.6764e-03 
2024-04-26 10:37:18,049 INFO: [finet..][epoch:  2, iter:   1,400, lr:(1.000e-04,)] [eta: 1 day, 14:03:39, time (data): 0.396 (0.073)] l_pix: 3.8689e-03 
2024-04-26 10:37:50,578 INFO: [finet..][epoch:  2, iter:   1,500, lr:(1.000e-04,)] [eta: 1 day, 13:54:55, time (data): 0.325 (0.004)] l_pix: 5.4998e-03 
2024-04-26 10:38:23,166 INFO: [finet..][epoch:  2, iter:   1,600, lr:(1.000e-04,)] [eta: 1 day, 13:47:26, time (data): 0.326 (0.004)] l_pix: 4.9715e-03 
2024-04-26 10:38:55,828 INFO: [finet..][epoch:  2, iter:   1,700, lr:(1.000e-04,)] [eta: 1 day, 13:41:04, time (data): 0.326 (0.005)] l_pix: 3.7397e-03 
2024-04-26 10:39:28,387 INFO: [finet..][epoch:  2, iter:   1,800, lr:(1.000e-04,)] [eta: 1 day, 13:34:58, time (data): 0.326 (0.004)] l_pix: 5.0053e-03 
2024-04-26 10:40:14,991 INFO: [finet..][epoch:  3, iter:   1,900, lr:(1.000e-04,)] [eta: 1 day, 14:18:28, time (data): 0.480 (0.154)] l_pix: 4.0870e-03 
2024-04-26 10:40:47,430 INFO: [finet..][epoch:  3, iter:   2,000, lr:(1.000e-04,)] [eta: 1 day, 14:10:35, time (data): 0.398 (0.076)] l_pix: 2.1170e-03 
2024-04-26 10:41:19,955 INFO: [finet..][epoch:  3, iter:   2,100, lr:(1.000e-04,)] [eta: 1 day, 14:03:41, time (data): 0.324 (0.004)] l_pix: 3.7137e-03 
2024-04-26 10:41:52,497 INFO: [finet..][epoch:  3, iter:   2,200, lr:(1.000e-04,)] [eta: 1 day, 13:57:24, time (data): 0.325 (0.004)] l_pix: 2.5914e-03 
2024-04-26 10:42:25,028 INFO: [finet..][epoch:  3, iter:   2,300, lr:(1.000e-04,)] [eta: 1 day, 13:51:32, time (data): 0.325 (0.004)] l_pix: 2.5597e-03 
2024-04-26 10:42:57,619 INFO: [finet..][epoch:  3, iter:   2,400, lr:(1.000e-04,)] [eta: 1 day, 13:46:23, time (data): 0.326 (0.004)] l_pix: 3.3640e-03 
2024-04-26 10:43:30,136 INFO: [finet..][epoch:  3, iter:   2,500, lr:(1.000e-04,)] [eta: 1 day, 13:41:21, time (data): 0.325 (0.004)] l_pix: 3.9891e-03 
2024-04-26 10:44:16,490 INFO: [finet..][epoch:  4, iter:   2,600, lr:(1.000e-04,)] [eta: 1 day, 14:11:54, time (data): 0.399 (0.076)] l_pix: 3.9246e-03 
2024-04-26 10:44:49,109 INFO: [finet..][epoch:  4, iter:   2,700, lr:(1.000e-04,)] [eta: 1 day, 14:06:27, time (data): 0.326 (0.003)] l_pix: 3.2208e-03 
2024-04-26 10:45:21,680 INFO: [finet..][epoch:  4, iter:   2,800, lr:(1.000e-04,)] [eta: 1 day, 14:01:15, time (data): 0.326 (0.004)] l_pix: 3.5839e-03 
2024-04-26 10:45:54,091 INFO: [finet..][epoch:  4, iter:   2,900, lr:(1.000e-04,)] [eta: 1 day, 13:56:00, time (data): 0.324 (0.005)] l_pix: 3.2079e-03 
2024-04-26 10:46:26,674 INFO: [finet..][epoch:  4, iter:   3,000, lr:(1.000e-04,)] [eta: 1 day, 13:51:27, time (data): 0.325 (0.005)] l_pix: 3.0376e-03 
2024-04-26 10:46:59,276 INFO: [finet..][epoch:  4, iter:   3,100, lr:(1.000e-04,)] [eta: 1 day, 13:47:11, time (data): 0.326 (0.004)] l_pix: 3.0631e-03 
2024-04-26 10:47:45,641 INFO: [finet..][epoch:  5, iter:   3,200, lr:(1.000e-04,)] [eta: 1 day, 14:11:36, time (data): 0.400 (0.076)] l_pix: 2.9497e-03 
2024-04-26 10:48:18,211 INFO: [finet..][epoch:  5, iter:   3,300, lr:(1.000e-04,)] [eta: 1 day, 14:06:51, time (data): 0.325 (0.005)] l_pix: 4.4565e-03 
2024-04-26 10:48:50,831 INFO: [finet..][epoch:  5, iter:   3,400, lr:(1.000e-04,)] [eta: 1 day, 14:02:27, time (data): 0.326 (0.004)] l_pix: 3.5651e-03 
2024-04-26 10:49:23,453 INFO: [finet..][epoch:  5, iter:   3,500, lr:(1.000e-04,)] [eta: 1 day, 13:58:16, time (data): 0.327 (0.003)] l_pix: 3.2777e-03 
2024-04-26 10:49:56,087 INFO: [finet..][epoch:  5, iter:   3,600, lr:(1.000e-04,)] [eta: 1 day, 13:54:19, time (data): 0.326 (0.003)] l_pix: 2.2879e-03 
2024-04-26 10:50:28,733 INFO: [finet..][epoch:  5, iter:   3,700, lr:(1.000e-04,)] [eta: 1 day, 13:50:34, time (data): 0.326 (0.003)] l_pix: 4.6326e-03 
2024-04-26 10:51:15,255 INFO: [finet..][epoch:  6, iter:   3,800, lr:(1.000e-04,)] [eta: 1 day, 14:11:06, time (data): 0.403 (0.078)] l_pix: 4.2765e-03 
2024-04-26 10:51:47,873 INFO: [finet..][epoch:  6, iter:   3,900, lr:(1.000e-04,)] [eta: 1 day, 14:07:00, time (data): 0.325 (0.003)] l_pix: 4.2168e-03 
2024-04-26 10:52:20,594 INFO: [finet..][epoch:  6, iter:   4,000, lr:(1.000e-04,)] [eta: 1 day, 14:03:15, time (data): 0.326 (0.003)] l_pix: 3.7943e-03 
2024-04-26 10:52:53,317 INFO: [finet..][epoch:  6, iter:   4,100, lr:(1.000e-04,)] [eta: 1 day, 13:59:40, time (data): 0.327 (0.004)] l_pix: 3.1557e-03 
2024-04-26 10:53:25,837 INFO: [finet..][epoch:  6, iter:   4,200, lr:(1.000e-04,)] [eta: 1 day, 13:55:54, time (data): 0.326 (0.004)] l_pix: 2.5282e-03 
2024-04-26 10:53:58,327 INFO: [finet..][epoch:  6, iter:   4,300, lr:(1.000e-04,)] [eta: 1 day, 13:52:15, time (data): 0.325 (0.003)] l_pix: 4.5782e-03 
2024-04-26 10:54:44,753 INFO: [finet..][epoch:  7, iter:   4,400, lr:(1.000e-04,)] [eta: 1 day, 14:09:36, time (data): 0.403 (0.079)] l_pix: 3.6732e-03 
2024-04-26 10:55:17,481 INFO: [finet..][epoch:  7, iter:   4,500, lr:(1.000e-04,)] [eta: 1 day, 14:06:06, time (data): 0.328 (0.004)] l_pix: 2.7929e-03 
2024-04-26 10:55:50,025 INFO: [finet..][epoch:  7, iter:   4,600, lr:(1.000e-04,)] [eta: 1 day, 14:02:28, time (data): 0.327 (0.005)] l_pix: 3.1917e-03 
2024-04-26 10:56:22,764 INFO: [finet..][epoch:  7, iter:   4,700, lr:(1.000e-04,)] [eta: 1 day, 13:59:13, time (data): 0.327 (0.004)] l_pix: 3.7214e-03 
2024-04-26 10:56:55,520 INFO: [finet..][epoch:  7, iter:   4,800, lr:(1.000e-04,)] [eta: 1 day, 13:56:07, time (data): 0.327 (0.004)] l_pix: 4.3508e-03 
2024-04-26 10:57:28,221 INFO: [finet..][epoch:  7, iter:   4,900, lr:(1.000e-04,)] [eta: 1 day, 13:53:03, time (data): 0.326 (0.004)] l_pix: 2.9245e-03 
2024-04-26 10:58:00,821 INFO: [finet..][epoch:  7, iter:   5,000, lr:(1.000e-04,)] [eta: 1 day, 13:49:57, time (data): 0.326 (0.004)] l_pix: 2.9352e-03 
2024-04-26 10:58:00,821 INFO: Saving models and training states.
2024-04-26 10:59:37,425 INFO: Validation FFHQ_val
	 # psnr: 26.6432	Best: 26.6432 @ 5000 iter
	 # niqe: 0.7604	Best: 0.7604 @ 5000 iter

2024-04-26 11:00:24,562 INFO: [finet..][epoch:  8, iter:   5,100, lr:(1.000e-04,)] [eta: 1 day, 16:10:21, time (data): 0.330 (0.004)] l_pix: 2.8352e-03 
2024-04-26 11:00:57,675 INFO: [finet..][epoch:  8, iter:   5,200, lr:(1.000e-04,)] [eta: 1 day, 16:05:18, time (data): 0.331 (0.004)] l_pix: 4.4298e-03 
2024-04-26 11:01:30,658 INFO: [finet..][epoch:  8, iter:   5,300, lr:(1.000e-04,)] [eta: 1 day, 16:00:16, time (data): 0.329 (0.004)] l_pix: 2.3713e-03 
2024-04-26 11:02:03,184 INFO: [finet..][epoch:  8, iter:   5,400, lr:(1.000e-04,)] [eta: 1 day, 15:54:50, time (data): 0.327 (0.004)] l_pix: 3.4664e-03 
2024-04-26 11:02:35,698 INFO: [finet..][epoch:  8, iter:   5,500, lr:(1.000e-04,)] [eta: 1 day, 15:49:34, time (data): 0.326 (0.004)] l_pix: 5.3094e-03 
2024-04-26 11:03:08,086 INFO: [finet..][epoch:  8, iter:   5,600, lr:(1.000e-04,)] [eta: 1 day, 15:44:19, time (data): 0.325 (0.004)] l_pix: 3.3794e-03 
2024-04-26 11:03:54,463 INFO: [finet..][epoch:  9, iter:   5,700, lr:(1.000e-04,)] [eta: 1 day, 15:55:21, time (data): 0.325 (0.003)] l_pix: 3.6352e-03 
2024-04-26 11:04:26,897 INFO: [finet..][epoch:  9, iter:   5,800, lr:(1.000e-04,)] [eta: 1 day, 15:50:12, time (data): 0.325 (0.004)] l_pix: 3.8169e-03 
2024-04-26 11:04:59,446 INFO: [finet..][epoch:  9, iter:   5,900, lr:(1.000e-04,)] [eta: 1 day, 15:45:20, time (data): 0.326 (0.004)] l_pix: 4.5741e-03 
2024-04-26 11:05:31,906 INFO: [finet..][epoch:  9, iter:   6,000, lr:(1.000e-04,)] [eta: 1 day, 15:40:30, time (data): 0.325 (0.005)] l_pix: 6.0189e-03 
2024-04-26 11:06:04,500 INFO: [finet..][epoch:  9, iter:   6,100, lr:(1.000e-04,)] [eta: 1 day, 15:35:58, time (data): 0.326 (0.005)] l_pix: 3.9024e-03 
2024-04-26 11:06:37,029 INFO: [finet..][epoch:  9, iter:   6,200, lr:(1.000e-04,)] [eta: 1 day, 15:31:29, time (data): 0.325 (0.004)] l_pix: 2.7507e-03 
2024-04-26 11:07:23,347 INFO: [finet..][epoch: 10, iter:   6,300, lr:(1.000e-04,)] [eta: 1 day, 15:41:29, time (data): 0.525 (0.199)] l_pix: 4.3604e-03 
2024-04-26 11:07:55,832 INFO: [finet..][epoch: 10, iter:   6,400, lr:(1.000e-04,)] [eta: 1 day, 15:36:59, time (data): 0.406 (0.084)] l_pix: 3.0545e-03 
2024-04-26 11:08:28,440 INFO: [finet..][epoch: 10, iter:   6,500, lr:(1.000e-04,)] [eta: 1 day, 15:32:43, time (data): 0.326 (0.004)] l_pix: 3.3997e-03 
2024-04-26 11:09:01,130 INFO: [finet..][epoch: 10, iter:   6,600, lr:(1.000e-04,)] [eta: 1 day, 15:28:39, time (data): 0.327 (0.004)] l_pix: 2.4354e-03 
2024-04-26 11:09:33,732 INFO: [finet..][epoch: 10, iter:   6,700, lr:(1.000e-04,)] [eta: 1 day, 15:24:36, time (data): 0.326 (0.005)] l_pix: 3.9751e-03 
2024-04-26 11:10:06,257 INFO: [finet..][epoch: 10, iter:   6,800, lr:(1.000e-04,)] [eta: 1 day, 15:20:35, time (data): 0.326 (0.004)] l_pix: 3.1538e-03 
2024-04-26 11:10:52,644 INFO: [finet..][epoch: 11, iter:   6,900, lr:(1.000e-04,)] [eta: 1 day, 15:29:49, time (data): 0.536 (0.211)] l_pix: 3.4797e-03 
2024-04-26 11:11:25,064 INFO: [finet..][epoch: 11, iter:   7,000, lr:(1.000e-04,)] [eta: 1 day, 15:25:42, time (data): 0.408 (0.086)] l_pix: 3.6901e-03 
2024-04-26 11:11:57,656 INFO: [finet..][epoch: 11, iter:   7,100, lr:(1.000e-04,)] [eta: 1 day, 15:21:51, time (data): 0.326 (0.004)] l_pix: 2.9372e-03 
2024-04-26 11:12:30,204 INFO: [finet..][epoch: 11, iter:   7,200, lr:(1.000e-04,)] [eta: 1 day, 15:18:03, time (data): 0.326 (0.004)] l_pix: 2.7489e-03 
2024-04-26 11:13:03,007 INFO: [finet..][epoch: 11, iter:   7,300, lr:(1.000e-04,)] [eta: 1 day, 15:14:34, time (data): 0.330 (0.003)] l_pix: 2.9577e-03 
2024-04-26 11:13:35,608 INFO: [finet..][epoch: 11, iter:   7,400, lr:(1.000e-04,)] [eta: 1 day, 15:10:58, time (data): 0.327 (0.004)] l_pix: 3.6297e-03 
2024-04-26 11:14:08,093 INFO: [finet..][epoch: 11, iter:   7,500, lr:(1.000e-04,)] [eta: 1 day, 15:07:23, time (data): 0.325 (0.003)] l_pix: 3.4792e-03 
2024-04-26 11:14:54,580 INFO: [finet..][epoch: 12, iter:   7,600, lr:(1.000e-04,)] [eta: 1 day, 15:15:54, time (data): 0.411 (0.086)] l_pix: 4.5885e-03 
2024-04-26 11:15:27,760 INFO: [finet..][epoch: 12, iter:   7,700, lr:(1.000e-04,)] [eta: 1 day, 15:12:54, time (data): 0.331 (0.004)] l_pix: 2.7645e-03 
2024-04-26 11:16:00,905 INFO: [finet..][epoch: 12, iter:   7,800, lr:(1.000e-04,)] [eta: 1 day, 15:09:55, time (data): 0.331 (0.004)] l_pix: 3.6053e-03 
2024-04-26 11:16:34,036 INFO: [finet..][epoch: 12, iter:   7,900, lr:(1.000e-04,)] [eta: 1 day, 15:06:59, time (data): 0.331 (0.004)] l_pix: 2.7951e-03 
2024-04-26 11:17:07,103 INFO: [finet..][epoch: 12, iter:   8,000, lr:(1.000e-04,)] [eta: 1 day, 15:04:04, time (data): 0.331 (0.004)] l_pix: 3.0636e-03 
2024-04-26 11:17:40,140 INFO: [finet..][epoch: 12, iter:   8,100, lr:(1.000e-04,)] [eta: 1 day, 15:01:10, time (data): 0.330 (0.002)] l_pix: 3.8558e-03 
2024-04-26 11:18:26,716 INFO: [finet..][epoch: 13, iter:   8,200, lr:(1.000e-04,)] [eta: 1 day, 15:09:07, time (data): 0.415 (0.087)] l_pix: 3.5049e-03 
2024-04-26 11:18:59,888 INFO: [finet..][epoch: 13, iter:   8,300, lr:(1.000e-04,)] [eta: 1 day, 15:06:19, time (data): 0.332 (0.004)] l_pix: 3.0809e-03 
2024-04-26 11:19:32,886 INFO: [finet..][epoch: 13, iter:   8,400, lr:(1.000e-04,)] [eta: 1 day, 15:03:26, time (data): 0.331 (0.005)] l_pix: 2.8304e-03 
2024-04-26 11:20:06,010 INFO: [finet..][epoch: 13, iter:   8,500, lr:(1.000e-04,)] [eta: 1 day, 15:00:42, time (data): 0.331 (0.003)] l_pix: 4.7624e-03 
2024-04-26 11:20:39,115 INFO: [finet..][epoch: 13, iter:   8,600, lr:(1.000e-04,)] [eta: 1 day, 14:58:00, time (data): 0.331 (0.003)] l_pix: 3.5913e-03 
2024-04-26 11:21:12,239 INFO: [finet..][epoch: 13, iter:   8,700, lr:(1.000e-04,)] [eta: 1 day, 14:55:22, time (data): 0.332 (0.004)] l_pix: 3.1402e-03 
2024-04-26 11:21:58,814 INFO: [finet..][epoch: 14, iter:   8,800, lr:(1.000e-04,)] [eta: 1 day, 15:02:45, time (data): 0.417 (0.089)] l_pix: 3.2891e-03 
2024-04-26 11:22:31,871 INFO: [finet..][epoch: 14, iter:   8,900, lr:(1.000e-04,)] [eta: 1 day, 15:00:02, time (data): 0.331 (0.003)] l_pix: 2.0359e-03 
2024-04-26 11:23:04,926 INFO: [finet..][epoch: 14, iter:   9,000, lr:(1.000e-04,)] [eta: 1 day, 14:57:23, time (data): 0.331 (0.003)] l_pix: 2.7843e-03 
2024-04-26 11:23:37,875 INFO: [finet..][epoch: 14, iter:   9,100, lr:(1.000e-04,)] [eta: 1 day, 14:54:42, time (data): 0.330 (0.003)] l_pix: 3.1494e-03 
2024-04-26 11:24:11,094 INFO: [finet..][epoch: 14, iter:   9,200, lr:(1.000e-04,)] [eta: 1 day, 14:52:15, time (data): 0.331 (0.004)] l_pix: 4.3920e-03 
2024-04-26 11:24:43,868 INFO: [finet..][epoch: 14, iter:   9,300, lr:(1.000e-04,)] [eta: 1 day, 14:49:31, time (data): 0.327 (0.003)] l_pix: 4.4600e-03 
2024-04-26 11:25:30,289 INFO: [finet..][epoch: 15, iter:   9,400, lr:(1.000e-04,)] [eta: 1 day, 14:56:18, time (data): 0.416 (0.092)] l_pix: 3.8009e-03 
2024-04-26 11:26:02,908 INFO: [finet..][epoch: 15, iter:   9,500, lr:(1.000e-04,)] [eta: 1 day, 14:53:28, time (data): 0.326 (0.004)] l_pix: 2.9664e-03 
2024-04-26 11:26:35,625 INFO: [finet..][epoch: 15, iter:   9,600, lr:(1.000e-04,)] [eta: 1 day, 14:50:44, time (data): 0.327 (0.004)] l_pix: 3.9947e-03 
2024-04-26 11:27:08,238 INFO: [finet..][epoch: 15, iter:   9,700, lr:(1.000e-04,)] [eta: 1 day, 14:47:59, time (data): 0.325 (0.003)] l_pix: 3.0428e-03 
2024-04-26 11:27:40,828 INFO: [finet..][epoch: 15, iter:   9,800, lr:(1.000e-04,)] [eta: 1 day, 14:45:16, time (data): 0.326 (0.004)] l_pix: 4.4438e-03 
2024-04-26 11:28:13,514 INFO: [finet..][epoch: 15, iter:   9,900, lr:(1.000e-04,)] [eta: 1 day, 14:42:40, time (data): 0.327 (0.003)] l_pix: 4.5240e-03 
2024-04-26 11:28:46,133 INFO: [finet..][epoch: 15, iter:  10,000, lr:(1.000e-04,)] [eta: 1 day, 14:40:03, time (data): 0.327 (0.003)] l_pix: 3.2078e-03 
2024-04-26 11:28:46,133 INFO: Saving models and training states.
2024-04-26 11:30:19,635 INFO: Validation FFHQ_val
	 # psnr: 26.6364	Best: 26.6432 @ 5000 iter
	 # niqe: 0.7602	Best: 0.7604 @ 5000 iter

2024-04-26 11:31:05,977 INFO: [finet..][epoch: 16, iter:  10,100, lr:(1.000e-04,)] [eta: 1 day, 15:46:27, time (data): 0.325 (0.004)] l_pix: 3.1209e-03 
2024-04-26 11:31:38,520 INFO: [finet..][epoch: 16, iter:  10,200, lr:(1.000e-04,)] [eta: 1 day, 15:43:11, time (data): 0.325 (0.004)] l_pix: 5.4339e-03 
2024-04-26 11:32:10,949 INFO: [finet..][epoch: 16, iter:  10,300, lr:(1.000e-04,)] [eta: 1 day, 15:39:53, time (data): 0.324 (0.003)] l_pix: 4.0816e-03 
